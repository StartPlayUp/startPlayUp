Index: frontend/src/Component/WebComponent/WebPage/WebFrame/webBody.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from \"react\";\nimport CreateButton from \"./CreateButton\";\n\nimport {\n    BodyFrame,\n    BodyCenter,\n    RoomFrame,\n    UserList,\n    Users,\n    ButtonArea,\n} from \"../Style/WebFrameStyle\";\nimport axios from \"axios\";\nimport {\n    Close,\n    Footer,\n    Input,\n    LoginMid,\n    LoginModal,\n    Modal,\n    ModalContents,\n    ResultButton,\n    Title\n} from \"../Style/CreateRoomStyle\";\nimport HEADER from \"./webHeader\";\n\nconst BODY = ({location, history}) => {\n    console.log(location);\n    console.log(history);\n\n    const [gameList, setGameList] = useState([]);\n    const [isSecret, setIsSecret] = useState(false);\n    const [password, setPassword] = useState(\"\");\n    const [room, setRoom] = useState();\n\n    const historyPush = (room) => {\n        console.log('history.push rooms : ')\n        console.log(room)\n        history.push({\n            pathname: \"/waitingRoom\",\n            state: {\n                input: room.roomTitle,\n                game: room.gameType,\n            },\n            // list: {\n            //     guestList: rooms.guestList,\n            // },\n        });\n    };\n\n    const onClick = (rooms) => {\n        if (rooms.secret) {\n            setIsSecret(true);\n            setRoom(rooms);\n        } else {\n            console.log('onClick rooms')\n            console.log(rooms)\n            historyPush(rooms);\n        }\n    };\n\n    const passwordChecker = () => {\n        console.log(\"----------------------start\");\n        console.log(room);\n        console.log(room.hostname);\n        console.log(password);\n        console.log(`password : ${password.toString()}`)\n        console.log('-------------------------------end')\n\n        // if (room.password === password.toString()) {\n        //     accessRoom(room)\n        //     historyPush(room);\n        // } else {\n        //     setIsSecret(false);\n        //     setPassword(\"\");\n        //     setRoom(\"\");\n        // }\n    };\n    const accessRoom = (rooms) => {\n        console.log('accessRoom')\n        console.log(rooms)\n        const accessRoomConfig = {\n            method: 'post',\n            url: 'http://localhost:4000/api/room/accessRoom',\n            data: {\n                roomId: rooms.roomId,\n                password: rooms.password,\n            }\n        }\n        axios(accessRoomConfig)\n            .then(function (response) {\n                console.log(\"roomId and RoomPassword check : \", response.data);\n                if (response.data.success && response.data.correct) {\n                    historyPush(room)\n                }else{\n                    alert('error')\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    const onPasswordChange = (e) => {\n        setPassword(e.target.value);\n    };\n\n    useEffect(() => {\n        axios\n            .post('http://localhost:4000/api/room/getRooms')\n            .then(function (result) {\n                console.log(\"getRooms post useEffect\");\n                const {roomList, success} = result.data;\n                success && setGameList(roomList);\n            })\n            .catch(function (error) {\n                console.error(\"error : \", error);\n            });\n    }, []);\n    return (\n        <>\n             {/*<HEADER/>*/}\n            <BodyFrame>\n                <BodyCenter>\n                    <ButtonArea>\n                        <CreateButton type={\"submit\"}/>\n                    </ButtonArea>\n                    <RoomFrame>\n                        <UserList background={\"white\"}>\n                            <Users width={\"5vw\"} align={\"center\"}>\n                                방 번호\n                            </Users>\n                            <Users width={\"15vw\"}>게임 이름</Users>\n                            <Users width={\"30vw\"}>방 제목</Users>\n                            <Users width={\"15vw\"}>방 사용자</Users>\n                            <Users width={\"5vw\"} align={\"center\"}>\n                                인원\n                            </Users>\n                        </UserList>\n                        {gameList.map(function (rooms, index) {\n                            return (\n                                <UserList\n                                    key={index}\n                                    background={\"#FFFFF3\"}\n                                    onClick={() => onClick(rooms, index)}\n                                >\n                                    <Users width={\"5vw\"} align={\"center\"}>\n                                        {index + 1}\n                                    </Users>\n                                    <Users width={\"15vw\"}>{rooms.gameType}</Users>\n                                    <Users width={\"30vw\"}>{`${rooms.roomTitle}  ${\n                                        rooms.secret ? \"\uD83D\uDD10\" : \"\"\n                                    }`}</Users>\n                                    <Users width={\"15vw\"}>{rooms.hostname}</Users>\n                                    <Users width={\"5vw\"} align={\"center\"}>\n                                        {rooms.roomLimit}\n                                    </Users>\n                                </UserList>\n                            );\n                        })}\n                    </RoomFrame>\n                    {isSecret && (\n                        <Modal>\n                            <LoginMid>\n                                <LoginModal>\n                                    <Close onClick={() => setIsSecret(false)}>x</Close>\n                                    <ModalContents>\n                                        <Title size={'24px'}>StartPlayUp</Title>\n                                        <Title size={'32px'}>\uD83D\uDD10</Title>\n                                        <label>\n                                            <span>암호 : &nbsp; </span>\n                                            <Input\n                                                type=\"password\"\n                                                onChange={onPasswordChange}\n                                                placeholder={'암호를 입력하세요.'}\n                                                width={'200px'}\n                                            />\n                                        </label>\n                                    </ModalContents>\n                                    <Footer>\n                                        <ResultButton onClick={passwordChecker}>\n                                            확인\n                                        </ResultButton>\n                                    </Footer>\n                                </LoginModal>\n                            </LoginMid>\n                        </Modal>\n                    )}\n                </BodyCenter>\n            </BodyFrame>\n        </>\n    );\n};\n\nexport default BODY;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/Component/WebComponent/WebPage/WebFrame/webBody.js b/frontend/src/Component/WebComponent/WebPage/WebFrame/webBody.js
--- a/frontend/src/Component/WebComponent/WebPage/WebFrame/webBody.js	(revision 924bbf8c06a60473a393037eeabe4494917e3678)
+++ b/frontend/src/Component/WebComponent/WebPage/WebFrame/webBody.js	(date 1632496363832)
@@ -65,7 +65,7 @@
         console.log(password);
         console.log(`password : ${password.toString()}`)
         console.log('-------------------------------end')
-
+        accessRoom(room)
         // if (room.password === password.toString()) {
         //     accessRoom(room)
         //     historyPush(room);
Index: frontend/src/Routes/peerStore.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { createContext, useMemo, useReducer, cloneElement, useState, useRef, useEffect, memo, Children } from \"react\";\nimport styled from 'styled-components'\n\nimport io from \"socket.io-client\";\nimport { connectDataPeer } from \"Common/peerModule/CreatePeer/createDataPeers\"\nimport { connectVoicePeer } from \"Common/peerModule/CreatePeer/createVoicePeers\"\nimport Peer from 'simple-peer';\n\nexport const PeerDataContext = createContext();\nexport const PeersContext = createContext();\nexport const VoicePeersContext = createContext();\nexport const RefContext = createContext();\nexport const RoomIdContext = createContext();\n\n\n\nconst StyledAudio = styled.audio`\n    display:none;\n`;\n\nconst Audio = (props) => {\n    const ref = useRef();\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n        })\n    }, []);\n    return (\n        props.peer.readable && <StyledAudio playsInline autoPlay ref={ref} />\n    );\n}\n\nconst initialPeerData = { type: \"\", game: \"\", nickname: \"\", data: {} }\n\nexport const PeerStore = ({ children }) => {\n    const [peerData, setPeerData] = useState(initialPeerData); //피어 데이터 받는곳\n    const valuePeerData = useMemo(() => ({\n        peerData,\n        setPeerData,\n        clearPeerData: () => {\n            setPeerData(initialPeerData);\n        }\n    }), [peerData]);\n\n\n    const [peers, setPeers] = useState([]);//피어 생성\n    const valuePeers = useMemo(() => ({\n        peers,\n        setPeers\n    }), [peers]);\n\n    const [voicePeers, setVoicePeers] = useState([]);//음성\n    const valueVoicePeers = useMemo(() => ({\n        voicePeers,\n        setVoicePeers\n    }), [voicePeers]);\n\n    // dispatch는 실행중 변경하지 않기에 useMemo를 통해 제함.\n\n    // const [roomID, setRoomID] = useState(\"\");//음성\n    // const valueRoomID = useMemo(() => ({\n    //     roomID,\n    //     setRoomID\n    // }), [roomID]);\n    const roomID = \"9a06eb80-9fd4-11eb-a3e2-377a237cffe7\";\n\n    const socketRef = useRef();\n    const myNickname = localStorage.getItem('nickname');\n    let peersRef = useRef([]);\n    let voicePeersRef = useRef([]);\n\n\n    const peersDestory = (peers, voicePeers) => {\n        peers.forEach((peer) => {\n            console.log(\"return useEffect peer destroy\")\n            // peer.peer.destroy()\n            peer.peer.on('close', () => console.log(\"delete\"));\n        });\n        setPeerData([]);\n\n        voicePeers.forEach((voicePeer) => {\n            voicePeer.peer.destroy()\n        });\n        setVoicePeers([]);\n    }\n    useEffect(() => {\n        if (roomID !== \"\") {\n            socketRef.current = io.connect(\"/\");\n            if (Peer.WEBRTC_SUPPORT) {\n                connectDataPeer({ socketRef, roomID, peersRef, setPeers, myNickname, setPeerData });//데이터 피어 생성\n                connectVoicePeer({ socketRef, voicePeersRef, roomID: roomID + \"-Voice\", setVoicePeers, myNickname });//보이스 피어 생성\n            } else {\n                console.log(\"webrtc not support!\")\n            }\n        }\n        // 방법 1 테스트 해보기.\n        // return () => peersRef.current.forEach(i => {\n        //     console.log(\"destroy peer\", i);\n        //     i.peer.removeAllListeners();\n        //     i.peer.destroy();\n        // })\n\n        // 방법 2 테스트 해보기.\n        // return () => {\n        //     setPeers({});\n        // }\n        return () => {\n            peersDestory(peers, voicePeers)\n        };\n    }, [roomID]);\n    return (\n        <>\n            {\n                voicePeers.map(({ peer }, index) => {\n                    return (\n                        <Audio key={index} peer={peer} peers={voicePeers} />\n                    );\n                })\n            }\n            <PeerDataContext.Provider value={valuePeerData}>\n                <PeersContext.Provider value={valuePeers}>\n                    <VoicePeersContext.Provider value={valueVoicePeers}>\n                        {/* <RoomIdContext.provider value={valueRoomID}> */}\n                        {children}\n                        {/* </RoomIdContext.provider > */}\n                    </VoicePeersContext.Provider>\n                </PeersContext.Provider>\n            </PeerDataContext.Provider>\n        </>\n    );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/Routes/peerStore.js b/frontend/src/Routes/peerStore.js
--- a/frontend/src/Routes/peerStore.js	(revision 924bbf8c06a60473a393037eeabe4494917e3678)
+++ b/frontend/src/Routes/peerStore.js	(date 1632495447258)
@@ -11,9 +11,6 @@
 export const VoicePeersContext = createContext();
 export const RefContext = createContext();
 export const RoomIdContext = createContext();
-
-
-
 const StyledAudio = styled.audio`
     display:none;
 `;
